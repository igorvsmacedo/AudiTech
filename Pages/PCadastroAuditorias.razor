@page "/Cadastros/Auditoria"
@using ControleAuditorias.Componentes;
@using VSM.Service;
@inject daoAuditoria vm;
@inject ToastService ToastService

<h3>Cadastro de auditorias</h3>

<button class="btn btn-primary" @onclick="OpenModal">Abrir auditoria <i class="fa-solid fa-plus"></i></button>


<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                @*<th scope="col"><input type="checkbox" class="form-check-input disabled" disabled /></th>*@
                <th scope="col">Empresa</th>
                <th scope="col">Descrição Auditoria</th>
                <th scope="col">Encerrada</th>
                <th scope="col">Aberta Em</th>
                <th scope="col">Ação</th>

            </tr>
        </thead>
        <tbody>
            @if (dsAuditorias != null)
            {
                @if (dsAuditorias.Count > 0)
                {
                    @foreach (var item in dsAuditorias)
                    {
                        <tr @onclick="() => SelecionarItem(item)" class="@(item == ItemSelecionado ? "table-primary" : "")">
                            @*<th scope="row"><input type="checkbox" class="form-check-input" /></th>*@
                            <th scope="row">@item.Empresa.Nome</th>
                            <td>@item.Descricao</td>
                            <td><input type="checkbox" class="form-check-input disabled" disabled @bind="item.Encerrada" /></td> 
                            <td>@item.DataAbertura.ToShortDateString()</td>
                            <td><button class="btn btn-danger" @onclick="()=>{excluiAuditoria(item);}"><i class="fa-solid fa-trash"></i></button>  <button class="btn btn-secondary" @onclick="()=>{vm.Sel.auditoriaSel = item;isEdit = true; modalAbrirAuditoria.Open();}"><i class="fa-solid fa-pencil"></i></button></td>

                        </tr>
                    }
                }
            }


        </tbody>
    </table>
</div>

<Modal @ref="modalAbrirAuditoria">
    <Body>
        <ComboBox Id="comboboxAuditoria" Label="Tipo de Auditoria" Items="comboBoxItems" @bind-SelectedValue="vm.Sel.auditoriaSel.IdTipoAuditoria" />
        <ComboBox Id="comboboxEmpresa" Label="Empresa" Items="comboboxEmpresaItens" @bind-SelectedValue="vm.Sel.auditoriaSel.IdEmpresa" />
        <label class="form-label">Descrição</label>
        <textarea class="form-control" @bind="vm.Sel.auditoriaSel.Descricao"></textarea>
         <label for="audtEnc">Encerrada</label>
        <input id="audtEnc" type="checkbox" @bind-value="vm.Sel.auditoriaSel.Encerrada" />
    </Body>
    <Footer>
        <button class="btn btn-success" type="submit" @onclick="cadastraAuditoria">Salvar <i class="fa-solid fa-floppy-disk"></i></button>

    </Footer>
</Modal>
@{
    string title = "Plano de Ação Auditoria: " + ItemSelecionado?.Descricao;
}
<Modal @ref="modalAbrirPlanoAcao" Titulo="@title">
    <Body>
        
        <label class="form-label">Correção</label>
        <textarea class="form-control" @bind="vm.Sel.planoAcaoSel.Descricao"></textarea>
            <label for="dtLimite">Data Limite</label>
        <input id="dtLimite" class="form-control" @bind="@vm.Sel.planoAcaoSel.DataLimite" type="date" />
    </Body>
    <Footer>
        <button class="btn btn-success" type="submit" @onclick="cadastraPlanoAcao">Salvar <i class="fa-solid fa-floppy-disk"></i></button>

    </Footer>
</Modal>

@*
<Modal @ref="modalEvidencias" >
    <Body>
        <PCadastroEvidencias></PCadastroEvidencias>
    </Body>
</Modal>

*@
@if (ItemSelecionado != null)
{
    <label>Descrição da auditoria</label>
<textarea class="form-control" @bind="ItemSelecionado.Descricao"></textarea>
}
@*<ComboBox Id="planoAcao" Label="Selecione o Plano de Ação" Items="dsPA" @bind-SelectedValue="vm.Sel.PaSel.IdPlanoAcao"></ComboBox>*@
<br/>
<h3>Plano de Ação</h3>
<div class="btn-group">

    <button class="btn btn-outline-secondary mb-2" @onclick="abreModalPA">Adicionar Plano de ação <i class="fa-solid fa-plus"></i></button>
    <button class="btn btn-outline-secondary mb-2" @onclick="excluiPlanoAcao">Excluir Plano de ação <i class="fa-solid fa-trash"></i></button>

</div>
@*<button class="btn btn-primary mb-2" @onclick="abremodalEvidencias">Adicionar Evidências<i class="fa-solid fa-plus"></i></button>*@
<ComboBox Id="comboboxPA" Label="Plano Ação" @bind-SelectedValue="vm.Sel.planoAcaoSel.IdPlanoAcao" Items="comboboxPlanoAcaoItens" />
<br/>

<TabControl>
    <TabPage Text="Consulta">
        @{getItensPlanoAcao();}
        <div class="tabletable-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        @*<th scope="col"><input type="checkbox" class="form-check-input disabled" disabled /></th>*@
                        <th scope="col">Descrição</th>
                        <th scope="col">Concluída</th>
                        <th scope="col">Data Conclusão</th>
                        <th scope="col">Data Limite</th>
                        <th scope="col">Concluir</th>

                    </tr>
                </thead>
                <tbody>
                    @if (dsItensPlanoAcao != null)
                    {
                        @if (dsItensPlanoAcao.Count > 0)
                        {
                            @foreach (var item in dsItensPlanoAcao.OrderByDescending(o=> o.DataLimite).ToList())
                            {
                                <tr class="statusEvento" > 
                                    <th scope="row"><textarea class="form-control" readonly>@item.Descricao</textarea></th>
                                    <td><input type="checkbox" class="form-check-input disabled"disabled  @bind="item.Concluido" /></td>
                                    <td>@item.DataConclusao?.ToShortDateString()</td>
                                    <td>@item.DataLimite?.ToShortDateString()</td>
                                    <td><button class="btn btn-success" @onclick="()=>{concluiEvento(item);}"><i class="fa-solid fa-check"></i></button> </td>
                                        
                                </tr>
                            }
                        }
                    }


                </tbody>
            </table>
        </div>
    </TabPage>
    <TabPage Text="Cadastro de Itens">
        @{
            getItensPlanoAcao();
            if (dsItensPlanoAcao != null)
            {
                if (dsItensPlanoAcao.Count > 0)
                {
                    foreach (var item in dsItensPlanoAcao)
                    {
                        if(!dsEvidenciasSel.Contains(item))
                        {
                            dsEvidenciasSel.Add(item);
                            dsEvidencias.Remove(item);

                        }
                    }
                }
            }
        }
                    <h3>Cadastrar itens no plano de ação</h3>
        <DualListBox AvailableItems="@dsEvidencias" OpcoesDisponiveis="Evidencias" OpcoesSelecionadas="Evidencias no Plano de Ação" SelectedItems="@dsEvidenciasSel"></DualListBox>
        <button class="btn btn-success @statusBtnSalvar" @onclick="salvaPlanoAcaoAuditoria">Salvar <i class="fa fa-floppy-disk"></i></button>
    </TabPage>
</TabControl>


<style>
    .concluido{
        background-color:lightgreen;
    }
    .atrasado{

    }

    .noLimite {
    }
</style>
@code {
    //DATA SOURCES
    private List<ComboBox.SelectItem> comboBoxItems = new List<ComboBox.SelectItem>();
    private List<TipoAuditoria> dsTipoAuditoria { get; set; } = new();
    private List<ComboBox.SelectItem> comboboxEmpresaItens = new List<ComboBox.SelectItem>();
    private List<Auditoria> dsAuditorias { get; set; } = new();
    private List<PlanoAcao> dsPlanoAcao { get; set; } = new();
    private List<ComboBox.SelectItem> comboboxPlanoAcaoItens = new List<ComboBox.SelectItem>();
    private List<Evidencia> dsItensPlanoAcao { get; set; } = new();
    //DECLARACOES
    bool isEdit { get; set; } = false;
    string statusBtnSalvar { get; set; } = "disabled";
    //  string statusEvento { get; set; } = "";
    private string selectedValue = "";
    private Modal? modalAbrirAuditoria { get; set; } = new();
    private Modal? modalEvidencias { get; set; } = new();
    private Modal? modalAbrirPlanoAcao { get; set; } = new();
    private List<Evidencia> dsEvidencias { get; set; } = new();
    private List<Evidencia> dsEvidenciasSel { get; set; } = new();
    private List<string> selectedItems = new List<string>();
    private Auditoria ItemSelecionado = new();
    protected override void OnInitialized()
    {
        base.OnInitialized();
        clearItens();
        getItens();
    }
    void clearItens()
    {
        vm.Sel = new();
        vm.Sel.auditoriaSel = new();
        vm.Sel.planoAcaoSel = new();
        ItemSelecionado = new();
    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if(firstRender)
        {
            getItens();

        }
    }   
    void getItens()
    {
        dsTipoAuditoria = vm.getTiposAuditoria(null);
        foreach(var item in dsTipoAuditoria) //populando ds do combo box
        {
            List<ComboBox.SelectItem> itemExistente = comboBoxItems.Where(w => w.Value == item.IdTipoAuditoria).ToList();
            if(itemExistente.Count < 1)
            {
                comboBoxItems.Add(new ComboBox.SelectItem { Value = item.IdTipoAuditoria, Text = item.DescricaoTipoAuditoria });
            }
        }
        var empresas = vm.getEmpresas().Where(w => w.Desativado != true).ToList();
        foreach(var itemEmpresa in empresas)
        {
            List<ComboBox.SelectItem> itemExistente = comboboxEmpresaItens.Where(w=> w.Value == itemEmpresa.IdEmpresa).ToList();
            if(itemExistente.Count < 1)
            {
                comboboxEmpresaItens.Add(new ComboBox.SelectItem { Value = itemEmpresa.IdEmpresa, Text = itemEmpresa.Nome });                
            }

        }
        dsAuditorias = vm.getAuditoriasPendentes();
        dsEvidencias = vm.getEvidencias(); 
    }
    void OpenModal()
    {
        clearForm();
        modalAbrirAuditoria?.Open();
    }
    void clearForm()
    {
        vm.Sel.auditoriaSel = new();
    }
    void cadastraAuditoria()
    {
        try
        {
            if(vm.Sel.auditoriaSel.IdTipoAuditoria == 0)
            {
                ToastService.ShowToast("Selecione o tipo de auditoria!", "ERRO", ToastLevel.Error);
                return;
            }
            if (vm.Sel.auditoriaSel.IdTipoAuditoria == 0)
            {
                ToastService.ShowToast("Selecione a empresa!", "ERRO", ToastLevel.Error);
                return;
            }
            if(String.IsNullOrEmpty(vm.Sel.auditoriaSel.Descricao))
            {
                ToastService.ShowToast("Digite a descrição para continuar!", "ERRO", ToastLevel.Error);
                return;
            }
            if (!isEdit)
            {
                vm.cadastraAuditoria(vm.Sel.auditoriaSel);                
            }
            else
            {
                if (vm.Sel.auditoriaSel.Encerrada == true)
                {                    
                    if(existemPlanosAtivos())
                    {
                        ToastService.ShowToast("Encerre o plano de ação primeiro!", "ERRO", ToastLevel.Error);
                        return;
                    }
                }
                vm.editaAuditoria(vm.Sel.auditoriaSel);
            }
            getItens();
            modalAbrirAuditoria?.Close();
            string msg = isEdit ? "Editado com sucesso!" : "Cadastrado com sucesso!";
            ToastService.ShowToast(msg, "Sucesso!", ToastLevel.Success);

        }
        catch(Exception e)
        {
            string msg = e.InnerException != null ? e.InnerException.Message : e.Message;
            ToastService.ShowToast("Erro ao cadastrar auditoria: " + msg, "ERRO", ToastLevel.Error);
        }
    }
    void excluiAuditoria(Auditoria audt)
    {
        SelecionarItem(audt);
        if (dsPlanoAcao != null)
        {            
            if ( dsPlanoAcao.Count > 0)
            {
                ToastService.ShowToast("Você não pode excluir essa auditoria, existem evidências ativas!", "ERRO", ToastLevel.Error);
                return;
            }
        }
        vm.excluiAuditoria(audt);
        ToastService.ShowToast("Excluído com sucesso!", "Sucesso!", ToastLevel.Success);
        clearItens();
        getItens();

    }
    void SelecionarItem(Auditoria auditoria)
    {
        ItemSelecionado = auditoria;
        try
        {            
            dsPlanoAcao = vm.getPlanoAcao(ItemSelecionado.IdAuditoria);
            if (vm.Sel.planoAcaoSel == null)
            {
                vm.Sel.planoAcaoSel = new();
            }
            vm.Sel.planoAcaoSel.IdAuditoria = ItemSelecionado.IdAuditoria;
            if (dsPlanoAcao.Count > 0)
            {            
                foreach(var item in dsPlanoAcao)
                {
                    ComboBox.SelectItem itemAdd = new ComboBox.SelectItem { Value = item.IdPlanoAcao, Text = item.Descricao };
                    if (!comboboxPlanoAcaoItens.Contains(itemAdd))
                    {
                        comboboxPlanoAcaoItens.Add(itemAdd);                        
                    }
                }
            }
            if(ItemSelecionado != null)
            {
                statusBtnSalvar = "";
            } 
        }
        catch(Exception e)
        {
            ToastService.ShowToast(e.Message, "Erro", ToastLevel.Error);
        }
    }
    void cadastraPlanoAcao()
    {
        try
        {

            vm.cadastraPlanoAcao(vm.Sel.planoAcaoSel);
            modalAbrirPlanoAcao.Close();

            getItens();
            modalAbrirAuditoria?.Close();
            ToastService.ShowToast("Cadastrado com sucesso!", "Sucesso!", ToastLevel.Success);
        }
        catch (Exception e)
        {
            ToastService.ShowToast("Erro ao cadastrar plano de ação: " + e.Message, "ERRO", ToastLevel.Error);
        }
    }
    void abreModalPA()
    {
        if (ItemSelecionado == null)
        {
            ToastService.ShowToast("Selecione a auditoria primeiro!", "ERRO", ToastLevel.Error);
            return;
        }
        if (ItemSelecionado.IdAuditoria == 0)
        {
            ToastService.ShowToast("Selecione a auditoria primeiro!", "ERRO", ToastLevel.Error);
            return;
        }

        modalAbrirPlanoAcao?.Open();
    }
    void excluiPlanoAcao()
    {
        try
        {
            if(dsItensPlanoAcao.Count > 0)
            {
                ToastService.ShowToast("Existem evidencias nesse plano de ação, exclua todas primeiro!", "ERRO!", ToastLevel.Error);
                return;
            }
            vm.excluiPlanoAcao(vm.Sel.planoAcaoSel);
            ToastService.ShowToast("Excluído com sucesso!", "Sucesso!", ToastLevel.Success);
        }
        catch (Exception e)
        {
            ToastService.ShowToast(e.Message, "ERRO!", ToastLevel.Error);
        }
    }
    void abremodalEvidencias()
    {
        vm.Sel = new();
        vm.Sel.evidenciaSel = new();
        modalEvidencias?.Open();
    }
    bool existemPlanosAtivos()
    {
        bool state = false;
        foreach(var item in dsPlanoAcao)
        {
            if(item.DataFinalizacao == null)
            {
                state = true;
                return state;
            }
            else
            {
                state = false;
            }
        }
        return state;
    }
    void salvaPlanoAcaoAuditoria()
    {
        try
        {
            vm.salvaPlanoAcaoAuditoria(vm.Sel.auditoriaSel, vm.Sel.planoAcaoSel, dsEvidenciasSel);
            ToastService.ShowToast("Salvo com sucesso!", "Sucesso!", ToastLevel.Success);
        }
        catch(Exception e)
        {
            ToastService.ShowToast(e.Message, "ERRO!", ToastLevel.Error);
        }
    }
    void getItensPlanoAcao()
    {
        try
        {         
            if(vm.Sel.planoAcaoSel != null)
            {
                if(vm.Sel.planoAcaoSel.IdPlanoAcao != 0)
                {

                    dsItensPlanoAcao = vm.getItensPlanoAcao(vm.Sel.planoAcaoSel.IdPlanoAcao);
                }
            }
        }
        catch (Exception e)
        {
            ToastService.ShowToast(e.Message, "ERRO!", ToastLevel.Error);
        }
    }
    void concluiEvento(Evidencia item)
    {
        try
        {    
            if(item.DataConclusao != null)
            {
                ToastService.ShowToast("A evidência já foi concluída anteriormente!", "ERRO!", ToastLevel.Error);
                return;
            }
            item.Concluido = true;
            item.DataConclusao = DateTime.Now;
            vm.dbContext.Evidencia.Update(item); 
            vm.dbContext.SaveChanges();
            getItensPlanoAcao();

        }
        catch (Exception e)
        {
            ToastService.ShowToast(e.Message, "ERRO!", ToastLevel.Error);
        }
      
    }
}
